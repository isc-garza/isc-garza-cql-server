"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var NullMessageListener = /*#__PURE__*/function () {
  function NullMessageListener() {
    _classCallCheck(this, NullMessageListener);
  }

  _createClass(NullMessageListener, [{
    key: "onMessage",
    value: function onMessage(source, code, severity, message) {// do nothing
    }
  }]);

  return NullMessageListener;
}();

var ConsoleMessageListener = /*#__PURE__*/function () {
  function ConsoleMessageListener() {
    var logSourceOnTrace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    _classCallCheck(this, ConsoleMessageListener);

    this.logSourceOnTrace = logSourceOnTrace;
  }

  _createClass(ConsoleMessageListener, [{
    key: "onMessage",
    value: function onMessage(source, code, severity, message) {
      // eslint-disable-next-line no-console
      var print = severity === 'Error' ? console.error : console.log;
      var content = "".concat(severity, ": [").concat(code, "] ").concat(message);

      if (severity === 'Trace' && this.logSourceOnTrace) {
        content += "\n<<<<< SOURCE:\n".concat(JSON.stringify(source), "\n>>>>>");
      }

      print(content);
    }
  }]);

  return ConsoleMessageListener;
}();

module.exports = {
  NullMessageListener: NullMessageListener,
  ConsoleMessageListener: ConsoleMessageListener
};